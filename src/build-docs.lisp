;; Copyright 2012, 2019 White Flame.  This file is part of AcheronVM, which is licensed under the GNU Lesser General Public License version 3.

;; This file converts obj/opdesc into bin/instructions.html

(defmacro taga (tag attributes &body body)
  "Format a HTML tag with attributes.  Each expression in the body becomes a member of the tag."
  ``("<" ,',tag ,,(when attributes `(mapcar (lambda (a) (list " " (car a) "=" (format nil "~s" (second a))))
                                             ,attributes))
         ,,@(if body (list ">" (cons 'list body) "</" `(quote ,tag) ">") (list "/>"))))

(defmacro tag (tag &optional &body body)
 "Plain HTML tag without attributes"
 `(taga ,tag () ,@body))

(defvar *legend*
  '(("r0-r127" "The registers currently visible in the register window.  r0 is always the head of the register stack.")
    ("rP" "The remembered Prior register, rD from the last instruction that used one (including 'with <i>rD</i>'). Acts like an implicit accumulator.")
    ("rP:r[P+1]" "32-bit effective register, with rP being the low word and the next register in memory being the high word.")
    ("rD" "A numbered register operand for data or destination, which will become the new rP after the instruction completes.")
    ("rA" "A numbered register operand for auxiliary/address use by the instruction.")
    ("imm8" "8-bit immediate value, representing 0-255.")
    ("imm8p" "8-bit immediate value, representing 1-256.")
    ("imm16" "16-bit immediate value, 0-65535.")
    ("rel8" "Used in branches, a target address which is within an 8-bit signed range of bytes from the first byte of the instruction.  A branch to a rel8-encoded $00 loops back to the branch instruction itself.")
    (":=" "Assignment")
    ))

(defmacro sym-if (var val &body then-else)
  `(let ((,var ,val))
     (if ,var ,@then-else)))

(defmacro sym-when (var val &body body)
  `(let ((,var ,val))
     (when ,var ,@body)))

(defun field (name row)
  (second (assoc name (cdr row))))

(defmacro if-field (name row then &optional else)
  `(let ((,name (field ',name ,row)))
     (if ,name ,then ,else)))

(defun render (item &optional (str t))
  "Unfolds an iolist-style combination of lists and strings to a stream, supporting calling tag operations"
  (when item
    (if (listp item)
        (case (first item)
          ((tag taga) (eval item))
          (otherwise (mapc (lambda (inner) (render inner str)) item)))
        (format str "~a" item))))




;; Main routine
(let ((rows (with-open-file (in "obj/opdesc")
              (read in))))
  (labels ((filter (&rest tags)
             (remove-if (lambda (row) (not (subsetp tags row :test #'equal))) rows)))
    ;; Tack on categories that are not declared
    (mapc (lambda (row)
            (sym-when cat (field 'category row)
              (unless (filter 'category `(name ,cat))
                (nconc rows `((category (name ,cat) (title, cat)))))))
          rows)

    ;; Smash together HTML tags
    
    (render (tag html
              (tag head
                (tag title "AcheronVM Instruction Set"))
              (taga body `((style "margin:0 2em"))
                (tag h1 "AcheronVM - Instruction Set")
                (tag p (tag i "The file was automatically generated by Acheron VM build tools") (tag br))
                ;; Table of contents
                (tag h2 "Contents")
                (tag ul
                  (let ((index 0))
                    (mapcar (lambda (category)
                              (prog1 (tag li (taga a `((href ,(format nil "#~a" index))) (field 'title category)))
                                (incf index)))
                            (cons '(category (title "Naming Conventions")) (filter 'category)))))
                ;; Header
                (tag hr)
                (taga a '((name "0")) (tag h2 "Naming Conventions"))
                (tag blockquote
                  (tag table
                    (mapcar (lambda (row) (list (tag tr
                                                  (taga td '((width 70)) (tag code (tag b (first row))))
                                                  (taga td '((width 20)))
                                                  (tag td (second row)))))
                            *legend*)))
                (tag hr)
                (tag h3 "Number of Instruction Opcodes Used: " (length (filter 'op)))
                
                ;; Per category

                (let ((index 0))
                  (mapcar (lambda (category)
                            (let* ((catname (field 'name category))
                                   (catfield (list 'category catname)))
                              (list
                               ;; Title & header
                               (tag hr)
                               (taga h2 `((id ,(format nil "~a" (incf index)))) (field 'title category))
                               (if-field header category (tag p header))
                               ;; Documentation
                               (mapcar (lambda (doc) (tag p (field 'doc doc))) (filter 'category-doc catfield))
                               (tag blockquote
                                 ;; Instructions, sorted by name
                                 (sym-when ops (sort (filter 'op catfield) #'string<
                                                     :key (lambda (x) (field 'name x)))
                                   (tag p (tag b (tag u "Instructions"))
                                     (tag table
                                       (mapcar (lambda (op)
                                                 (tag tr
                                                   (tag td (tag b (tag pre (field 'name op))))
                                                   (tag td (tag i (tag pre
                                                                    (if (eq 'e (field 'embed op)) "*" " ")
                                                                    (field 'operandtext op))))
                                                   (taga td '((width 20)))
                                                   (tag td (field 'doc op))))
                                               ops))))
                                 ;; Pseudo instructions
                                 (sym-when pseudos (filter 'pseudo-op catfield)
                                   (tag p (tag b (tag u "Pseudo Instructions"))
                                        (tag table
                                          (mapcar (lambda (p)
                                                    (tag tr
                                                      (tag td (tag b (tag code (field 'name p))))
                                                      (tag td (tag i (tag code (field 'operands p))))
                                                      (taga td '((width 10)))
                                                      (tag td (field 'doc p))))
                                                  pseudos))))
                                 ;; Natives
                                 (sym-when natives (filter 'native catfield)
                                   (tag p (tag b (tag u "Native Routines"))
                                        (tag table
                                          (mapcar (lambda (n)
                                                    (tag tr
                                                      (tag td (tag pre (field 'calltype n) " "
                                                                   (tag b (field 'name n))))
                                                      (taga td '((width 20)))
                                                      (tag td (field 'doc n))
                                                      ))
                                                  natives))))
                                 ;; Zeropage
                                 (sym-when zps (filter 'zeropage catfield)
                                   (tag p (tag b (tag u "Zeropage Locations"))
                                        (tag table
                                          (mapcar (lambda (zp)
                                                    (tag tr
                                                      (tag td (tag b (tag code (field 'name zp) ":")))
                                                      (tag td (tag pre " .res " (field 'size zp)))
                                                      (taga td '((width 20)))
                                                      (tag td (field 'doc zp))))
                                                  zps))))))))
                          (filter 'category))))))
    ))
